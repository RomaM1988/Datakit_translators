def gv
def emailHandle
def buildDir
def stageDir
def DOWNLOAD_AGENT='pni6w2981_yyjtadmn_WINDOW'
def TEST_AGENT='DATAKIT_pnlv6s485_yyjtadmn_test'
def STAGE_AGENT='DATAKIT_pnlv6s485_yyjtadmn_test'

pipeline {
    agent any
	parameters {
		string(name: 'InteropRelease', defaultValue: 'Interop10', description : 'Use the latest IP from Interop release to start the process.')
		string(name: 'DatakitPath', defaultValue: '//plm/pnnas/jtdev/datakit_translator', description : 'Path where Interop baseline will be downloaded for Datakit translators.')
		string(name: 'StagePath', defaultValue: '/apps/JenkinsBase/stage/Datakit', description : 'Path where datakit_translator kits are to be staged.')
		booleanParam(name: 'Deploy', defaultValue: false, description : 'Deploy staging directory contents to customer setup')
	}
stages {
		
	stage('CheckVersionAndDownload') {
        agent { label "${DOWNLOAD_AGENT}" }
        steps {
		script{
			echo  "checking if any new baseline for ${params.InteropRelease} is available for download."
			bat """ P:/Data_Exchange/from_Roma/jenkins/datakit/checkVersion_Download.bat ${params.InteropRelease} """
	            }					
            }
        }

	stage('Test') {
        	agent { label "${TEST_AGENT}" }
        	steps {
			script{
				echo "new baseline is available so starting the test for ${params.InteropRelease}."
				dir ("//plm/pnnas/ppic/Data_Exchange/from_Roma/jenkins/datakit")
				{
                       	 	 sh " /usr/bin/perl -w Datakit_interop.pl -b=${params.InteropRelease} -r=1 " 
				}
			}					
            	}
        }
	stage('StageAndDeploy') {
        	agent { label "${STAGE_AGENT}" }
        	steps {
			script{
				echo  "Executing stage and deploy..."
				buildDir="${params.DatakitPath}/Baseline_${params.InteropRelease}"
				stageDir="${params.StagePath}/Datakit_TranslatorWorker_${BUILD_TIMESTAMP}"
				sh "chmod +x ./stageAndDeployTranslatorWorkerUnit.sh "
				//sh "./stageAndDeployTranslatorWorkerUnit.sh ${buildDir} ${stageDir} 'Artifacts' ${params.Deploy}"
				def stdout = sh(returnStdout: true , script: "./stageAndDeployTranslatorWorkerUnit.sh ${buildDir} ${stageDir} 'Artifacts' ${params.Deploy}").trim()
                    		result = stdout.readLines().drop(1).join(" ")
				echo ${result}
                    		//if (result.equals("0")) {                                          
                      		//error "As there is no CP submitted so skipping Group build and testing!"
                    		//} 
                    		//else {                                   
                      		//  echo "total number of CP submitted for this build is ${result}"
                    		//} 
			}					
            	}
        }
	stage('Purge Unit') {
		agent { label "${STAGE_AGENT}" }
            	steps {
			echo "Executing Purge Unit Path ..."
		script{		
			unitDir="${params.DatakitPath}/Baseline_${params.InteropRelease}"
			echo "purge unit is ${buildDir}"
			sh "chmod +x ./purge.sh "
			sh "./purge.sh ${unitDir}"		
		}					
            }
	}
	stage('Purge Stage') {
		agent { label "${STAGE_AGENT}" }
        	steps {
			echo "Executing Purge Stagging Path ..."
		script{		
			sh "chmod +x ./purge.sh "
			sh "./purge.sh ${params.StagePath}"		
		}					
            }
	}
    }
    post {
		
        success {
            echo 'All tasks completed successfully.'
        }
	failure {
		echo 'One or more stages have failed.'
	}
	always {
		script{
			echo  "send email always."
		}					
	}
    }
}
